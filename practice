## practice with the basic plot
dose <- c(20,30,40,45,60)
drugA <- c(16,20,27,40,60)
drugB <- c(15,18,25,31,40)



plot(dose, drugA, type = "b", col = "red", lty = 2, lwd = 2, pch = 2, cex = 2, main = "Clinical trial for DrugA", xlab = "Dosage", ylab = "Drug Response", sub = "This is hypothetical data", xlim = c(0,60), ylim = c(0,70))

plot(dose, drugA, type = "b", col = "red", lty = 2, lwd = 2, pch = 2, cex = 2, main = "Clinical trial for DrugA", xlab = "Dosage", ylab = "Drug Response", sub = "This is hypothetic data", xlim = c(0,60), ylim = c(0,70), bg = "blue")

## triangles with blue color and green background
plot(dose, drugB, type = "b", col = "blue", bg = "green", pch = 24, lty = 6)

## triangles with blue color but no background color
plot(dose, drugB, type = "b", col = "blue", bg = "green", pch = 2, lty = 6)

## That is why the pch have some the same shape but they are asigned different serial numbers

##################################################################
## abline and legend
##################################################################
opar <- par(no.readonly = T)
par(lwd = 2, cex = 1.5, font.lab = 2)
plot(dose,drugA, type = "b",pch = 15, lty = 1,col = "red", ylim = c(0,60), main = "DrugA VS DrugB", xlab = "Drug Dosage", ylab = "Drug Response", sub = "This is hypothetical data", xlim = c(10,60))

lines(dose, drugB, type = "b", lty = 2, pch = 17, col = "blue")

abline(h = c(30), lwd = 1.5, lty = 2, col = "gray")

library(Hmisc)
minor.tick(nx = 3, ny = 3,  tick.ratio = 0.5)

legend("topleft", inset = .05, title = "Drug Type", c("A","B"), lty = c(1,2), pch= c(15,17), col = c("red", "blue"))

par(opar)


##################################################################
## deal with the axis
##################################################################

x <- c(1:10)
y <- x
z <- 10/x

opar <- par(no.readonly = T)
par(mar = c(5,4,4,9) + 0.1)
plot(x,y, type = "b", pch = 21, lty = 3, col = "red", yaxt = "n", ann = F)

lines(x,z, type = "b", pch = 22, col = "blue", lty = 2)

axis(2, at = x, labels = x, col.axis = "red", las = 2)

axis(4, at = z, labels = round(z, digits = 2), col.axis = "blue", las = 2, cex.axis = 0.7, tck = -0.01)

mtext("y=10/x", side = 4, line = 3, cex.lab = 1, las = 2, col = "blue")

title("An Example of Creative Axes", xlab = "X values", ylab = "Y = X")

par(opar)

##################################################################
## text annotations
##################################################################
attach(mtcars)
plot(wt, mpg, main = "Mileage vs Car Weight", xlab = "Weight", ylab = "Mileage", pch = 18, col = "blue")
text(wt, mpg, row.names(mtcars), cex = 0.6, pos = 4, col = "red")
detach(mtcars)




opar <- par(no.readonly = T)
par(cex = 1.5)
plot(1:7, 1:7, type = "n")
text(3,3, "Example of default text")
text(4,4, family = "mono", "Example of mono-spaced text")
text(5,5, family = "serif", "Example of serif-spaced text")
text(6,6, family = "arial", "Example of Arial text")
par(opar)



##################################################################
## combine graph together
##################################################################
## 2*2
attach(mtcars)
oapr <- par(no.readonly = T)
par(mfrow = c(2,2))
plot(wt,mpg, main = "Scatter plot of wt vs mpg")
plot(wt, disp, main = "Scatter plot of wt vs disp")
hist(wt, main = "Histgram of wt")
boxplot(wt, main = "Boxplot of wt")
par(opar)
detach(mtcars)

##1*3
attach(mtcars)
opar <- par(no.readonly = T)
par(mfrow = c(3,1))
hist(wt)
hist(mpg)
hist(disp)
par(opar)
detach(mtcars)


## not symmetrical plot arrangment
attach(mtcars)
layout(matrix(c(1,1,2,3),2,2,byrow = T))
hist(wt)
hist(mpg)
hist(disp)
detach(mtcars)


attach(mtcars)
layout(matrix(c(1,1,2,3),2,2,byrow = T), widths = c(2,1), heights = c(1,3))
hist(wt)
hist(mpg)
hist(disp)
detach(mtcars)




##################################################################
## combine different type of graph in one picture
##################################################################
oapr <- par(no.readonly = T)
par(fig = c(0,0.8,0,0.8))
plot(mtcars$wt, mtcars$mpg, xlab = "Miles per Gallon", ylab = "Car Weight")

par(fig = c(0,0.8,0.55,1), new = T)
boxplot(mtcars$wt, horizontal = T, axes = F)

par(fig = c(0.65, 1, 0, 0.8), new = T)
boxplot(mtcars$mpg, axes = F)

mtext("Enhanced Scatter plot", side = 3, outer = T, line = -4)

par(opar)




##################################################################
## plot the function
##################################################################

funhaha <- function(x)(sin(x))

plot(funhaha)



##################################################################
## plot the arrows in R coordinate system
##################################################################
plot(c(0,1),c(0,1))
arrows(0,0,1,1)






##################################################################
## data managment
##################################################################
manager <- c(1, 2, 3, 4, 5)
date <- c("10/24/08", "10/28/08", "10/1/08", "10/12/08", "5/1/09")
country <- c("US", "US", "UK", "UK", "UK")
gender <- c("M", "F", "F", "M", "F")
age <- c(32, 45, 25, 39, 99)
q1 <- c(5, 3, 3, 3, 2)
q2 <- c(4, 5, 5, 3, 2)
q3 <- c(5, 2, 5, 4, 1)
q4 <- c(5, 5, 5, NA, 2)
q5 <- c(5, 5, 2, NA, 1)
leadership <- data.frame(manager, date, country, gender, age,q1, q2, q3, q4, q5, stringsAsFactors=FALSE)

##############################
## creating new variables

mydata <- data.frame(x1 = c(2,2,4,6), x2 = c(3,4,2,8))
mydata$sumx <- mydata$x1 + mydata$x2
mydata$meanx <- (mydata$x1 + mydata$x2)/2

mydata <- transform(mydata, sumx = x1 + x2, meanx = (x1 + x2)/2)

##############################
## recoding variables
leadership$age[leadership$age > 90] <- NA

leadership$agecat[leadership$age > 75] <- "Elder"
leadership$agecat[leadership$age >= 55 & leadership$age <= 75] <- "Middle Aged"
leadership$agecat[leadership$age < 55] <- "Young"


leadership <- within(leadership, {
  agecat <- NA
  agecat[age > 75] <- "Elder"
  agecat[age >= 55 & age <= 75] <- "Middle Aged"
  agecat[age < 55] <- "Young"
})


## use cut to set new variables and catergorize a continuous vector
transform(mtcars, disp_cat = cut(mtcars$disp, breaks= c(0,200,300,500), labels = c("short","moderate","long")))
transform(leadership, agecat = cut(leadership$age, breaks = c(0,55,75,100), labels = c("Young","Middle Aged", "Elder")))

##############################
## rename the variables

fix(leadership)

library(reshape)
leadership <- rename(leadership, c(manager = "managerID", date = "testDate"))

names(leadership)
names(leadership)[2] <- "testdate"
names(leadership)[6:10] <- c("item1","item2","item3","item4","item5")


##############################
## deal with missing value

## find na value
is.na(leadership[,6:10])

## exclude missing values from analyses
##1, use function has a na.rm = T parameters
x <- c(1,2,NA,4)
y <- sum(x, na.rm = T)

##2, use na.omit() function to delete the NA values in rows(observations)
newdata <- na.omit(leadership)


##############################
## date values
strDates <- c("2007-22-06","2014-01-01")
as.Date(strDates, "%m/%d/%Y")
##[1] NA NA
as.Date(strDates, "%Y/%d/%m")
##[1] NA NA
as.Date(strDates,"%Y-%d-%m")
##[1] "2007-06-22" "2014-01-01"

###############
##  %d  01-31
##  %a  Mon
##  %A  Monday
##  %m  00-12
##  %b  Jan
##  %B  January
##  %Y  2007
##  %y  07
###############


myformat <- "%m/%d/%y"
leadership$date <- as.Date(leadership$date, myformat)
##  manager testdate country gender age item1 item2 item3 item4 item5       date
##1       1 10/24/08      US      M  32     5     4     5     5     5 2008-10-24
##2       2 10/28/08      US      F  45     3     5     2     5     5 2008-10-28
##3       3  10/1/08      UK      F  25     3     5     5     5     2 2008-10-01
##4       4 10/12/08      UK      M  39     3     3     4    NA    NA 2008-10-12
##5       5   5/1/09      UK      F  99     2     2     1     2     1 2009-05-01


date()
##[1] "Tue Jan 10 09:14:46 2017"
Sys.Date()
##[1] "2017-01-10"

myformat <- "%Y//%m//%d//%A//%B"
format(date(),myformat)
##Error in format.default(date(), myformat) : invalid 'trim' argument
format(Sys.Date(), myformat)
##[1] "2017//01//10//Tuesday//January"


## date can do subtractions
startdate <- as.Date("2004-02-13")
enddate <- as.Date("2011-01-22")
enddate - startdate
##Time difference of 2535 days
difftime(startdate,enddate)
##Time difference of -2535 days
difftime(startdate,enddate,units = "weeks")
##Time difference of -362.1429 weeks
difftime(startdate,enddate,units = "years")
##Error in match.arg(units) : 
##  'arg' should be one of “auto”, “secs”, “mins”, “hours”, “days”, “weeks”


##############################
## sorting data

leadership
##  manager testdate country gender age item1 item2 item3 item4 item5       date
##1       1 10/24/08      US      M  32     5     4     5     5     5 2008-10-24
##2       2 10/28/08      US      F  45     3     5     2     5     5 2008-10-28
##3       3  10/1/08      UK      F  25     3     5     5     5     2 2008-10-01
##4       4 10/12/08      UK      M  39     3     3     4    NA    NA 2008-10-12
##5       5   5/1/09      UK      F  99     2     2     1     2     1 2009-05-01

leadership[order(leadership$age),]
##  manager testdate country gender age item1 item2 item3 item4 item5       date
##3       3  10/1/08      UK      F  25     3     5     5     5     2 2008-10-01
##1       1 10/24/08      US      M  32     5     4     5     5     5 2008-10-24
##4       4 10/12/08      UK      M  39     3     3     4    NA    NA 2008-10-12
##2       2 10/28/08      US      F  45     3     5     2     5     5 2008-10-28
##5       5   5/1/09      UK      F  99     2     2     1     2     1 2009-05-01



##############################
## merge data

id1 <- c(2, 3, 4, 5, 7)
heights <- c(62, 65, 71, 71, 67)
df1 <- data.frame(id1 = id1, heights)

id2 <- c(1, 2, 6:10)
weights <- c(147, 113, 168, 135, 142, 159, 160)
df2 <- data.frame(id2 = id2, weights)

df1$sex <- c("f", "m", "f", "f", "m")
df2$sex <- c("f", "f", "m", "m", "f", "f", "f")


merge(df1,df2, by.x = "id1", by.y ="id2", all = F)
##  id1 heights sex.x weights sex.y
##1   2      62     f     113     f
##2   7      67     m     135     m

merge(df1,df2, by.x = "id1", by.y = "id2", all = T)
##   id1 heights sex.x weights sex.y
##1    1      NA  <NA>     147     f
##2    2      62     f     113     f
##3    3      65     m      NA  <NA>
##4    4      71     f      NA  <NA>
##5    5      71     f      NA  <NA>
##6    6      NA  <NA>     168     m
##7    7      67     m     135     m
##8    8      NA  <NA>     142     f
##9    9      NA  <NA>     159     f
##10  10      NA  <NA>     160     f

merge(df1,df2, by.x = "id1", by.y = "id2", all.x = T)
##  id1 heights sex.x weights sex.y
##1   2      62     f     113     f
##2   3      65     m      NA  <NA>
##3   4      71     f      NA  <NA>
##4   5      71     f      NA  <NA>
##5   7      67     m     135     m
merge(df1,df2, by.x = "id1", by.y = "id2", all.y = T)
##  id1 heights sex.x weights sex.y
##1   1      NA  <NA>     147     f
##2   2      62     f     113     f
##3   6      NA  <NA>     168     m
##4   7      67     m     135     m
##5   8      NA  <NA>     142     f
##6   9      NA  <NA>     159     f
##7  10      NA  <NA>     160     f




##############################
## subseting data

## selecting and keeping variables
newdata <- leadership[,c(6:10)]

myvars <- c("q1","q2","q3","q4","q5")
newdata1 <- leadership[myvars]

## excluding and droping variables
myvars <- names(leadership) %in% c("q3","q4")
newdata2 <- leadership[!myvars]

newdata3 <- leadership[c(-8,-9)]

newdata4 <- leadership
newdata4$q3 <- newdata4$q4 <- NULL


## selecting observations

newdata5 <- leadership[1:3,]
newdata6 <- leadership[which(leadership$gender == "M" & leadership$age > 30),]
newdata7 <- leadership[leadership$gender == "M" & leadership$age > 30, ]

leadership$testdate <- as.Date(leadership$date, "%m/%d/%y")
startdate <- as.Date("2009-01-01")
enddate <- as.Date("2009-10-31")
newdata8 <- leadership[which(leadership$testdate >= startdate & leadership$testdate <= enddate),]


## subset function
newdata9 <- subset(leadership, age > 35 | age < 24, select = c(q1,q2,q3,q4))

newdata10 <- subset(leadership, gender == "M" & age > 25, select = gender:q4)


## random samples

mysample <- leadership[sample(1:nrow(leadership), 3, replace = F),]

## use SQL
library(sqldf)
newdf <- sqldf("select * from mtcars where carb = 1 order by mpg", row.names = T)

sqldf("select avg(mpg) as avg_mpg, avg(disp) as avg_disp, gear from mtcars where cyl in (4,6) group by gear")




##################################################################
## advanced data managment
##################################################################

## turn a vector of values to a vector of z scores
scale(vector)

## probability functions
##计算给定正态分布95%面积下的z分数值
qnorm(0.95, mean = 0, sd = 1)   ##1.644

##计算z分数为0.95时候，正态分布下的面积
pnorm(0.95, mean = 0, sd = 1)   ##0.8289

##计算在给定的正态分布内，取到特定值的概率
dnorm(0.95, mean = 0,sd = 1)    ##0.254

##给出一个既定范围，既定数量的正态分布
rnorm(100, mean = 0, sd = 1)  ##一个数量为100，均值为0，sd为1的分布

pnorm(9.75,mean = 10, sd = 0.125) 
pnorm(10.25, mean = 10, sd = 0.125)
pnorm(9.75,mean = 10, sd = 0.125) + (1 - pnorm(10.25, mean = 10, sd = 0.125))
pnorm(10.25, mean = 9.7, sd = 0.0875) - pnorm(9.75,mean = 9.7, sd = 0.0875)

##从9.9到9.1，随着离原始均值10偏差越来越大，检验功效越来越高，说明检测出有问题的概率越来越高，9.5之后，就基本是100%了
pnorm(9.75,mean = 9.1, sd = 0.0875) + (1 - pnorm(10.25, mean = 9.1, sd = 0.0875))
pnorm(9.75,mean = 9.2, sd = 0.0875) + (1 - pnorm(10.25, mean = 9.2, sd = 0.0875))
pnorm(9.75,mean = 9.3, sd = 0.0875) + (1 - pnorm(10.25, mean = 9.3, sd = 0.0875))
pnorm(9.75,mean = 9.4, sd = 0.0875) + (1 - pnorm(10.25, mean = 9.4, sd = 0.0875))
pnorm(9.75,mean = 9.5, sd = 0.0875) + (1 - pnorm(10.25, mean = 9.5, sd = 0.0875))
pnorm(9.75,mean = 9.6, sd = 0.0875) + (1 - pnorm(10.25, mean = 9.6, sd = 0.0875))
pnorm(9.75,mean = 9.7, sd = 0.0875) + (1 - pnorm(10.25, mean = 9.7, sd = 0.0875))
pnorm(9.75,mean = 9.8, sd = 0.0875) + (1 - pnorm(10.25, mean = 9.8, sd = 0.0875))
pnorm(9.75,mean = 9.9, sd = 0.0875) + (1 - pnorm(10.25, mean = 9.9, sd = 0.0875))


##随着sd越来越大，检验功效越来越高，说明检测出有问题的概率越来越高，但是功效增长幅度没有均值变化来的显著
1- pnorm(10.25, mean = 10, sd = 0.0875) + pnorm(9.75,mean = 10, sd = 0.0875)
1-pnorm(10.25, mean = 10, sd = 0.0975) + pnorm(9.75,mean = 10, sd = 0.0975)
1-pnorm(10.25, mean = 10, sd = 0.1075) + pnorm(9.75,mean = 10, sd = 0.1075)
1-pnorm(10.25, mean = 10, sd = 0.1175) + pnorm(9.75,mean = 10, sd = 0.1175)
1-pnorm(10.25, mean = 10, sd = 0.1275) + pnorm(9.75,mean = 10, sd = 0.1275)
1-pnorm(10.25, mean = 10, sd = 0.1375) + pnorm(9.75,mean = 10, sd = 0.1375)
1-pnorm(10.25, mean = 10, sd = 0.1475) + pnorm(9.75,mean = 10, sd = 0.1475)
1-pnorm(10.25, mean = 10, sd = 0.1575) + pnorm(9.75,mean = 10, sd = 0.1575)
1-pnorm(10.25, mean = 10, sd = 0.1675) + pnorm(9.75,mean = 10, sd = 0.1675)
1-pnorm(10.25, mean = 10, sd = 0.1775) + pnorm(9.75,mean = 10, sd = 0.1775)
1-pnorm(10.25, mean = 10, sd = 0.1875) + pnorm(9.75,mean = 10, sd = 0.1875)
1-pnorm(10.25, mean = 10, sd = 0.1975) + pnorm(9.75,mean = 10, sd = 0.1975)


### density plot
library(MASS)
data=read.csv("2dplot.csv")
x=data$labor.gdp
y=data$capital.gdp

xy.kde <- kde2d(x,y, n = 100)

rgb.palette=colorRampPalette(c("white","red"))
filled.contour(xy.kde,xlim = c(0, 0.07), ylim = c(0, 15),col = rgb.palette(27),plot.title = title(main = "",xlab = "Growth rate of labor/gdp", ylab = "Growth rate of capital/gdp"))
contour(xy.kde, xlim = c(0, 0.07), ylim = c(0, 15),lwd=1,add = T)
points(x,y, pch = 16, cex = 0.5)



pretty(c(-3,3),30)
y <- dnorm(x)
plot(x,y,type = "l", xlab = "Normal Deviate", ylab = "Density", yaxs = "i")
##yaxs,xaxa: plot默认画图时会在预留一部分坐标空间，设置为“i”后，就可以去掉预留空间



library(MASS)
options(digits = 3)
set.seed(1234)
mean <- c(230.7, 146.7, 3.6)
sigma <- matrix(c(15360.8, 6721.2, -47.1, 6721.2, 4700.9, -16.5,-47.1, -16.5, 0.3), nrow = 3, ncol = 3)
mydata <- mvrnorm(500, mean, sigma)
mydata <- as.data.frame(mydata)
names(mydata) <- c("y", "x1", "x2")
dim(mydata)

#############################
## character function

x <- c("Hello", "world", "!")
nchar(x)

> length("")
[1] 1
> nchar("")
[1] 0


DNA <- "AtGCtttACC"
tolower(DNA)
toupper(DNA)
chartr("Tt","Uu",DNA)
chartr("Tt","UU",DNA)


mychar <- c("ACTACCACTAACCACT","TCATCCATTCGTGGG","GTTGTTCCATAG")

dna2rna <- function(inputStr){
  if(!is.character(inputStr))
    stop("need character input")
  is = toupper(inputStr)
  chartr("T", "U", is)
}




> paste("CK",1:6, sep = "")
[1] "CK1" "CK2" "CK3" "CK4" "CK5" "CK6"

x <- list(a = "aaa", b = "bbb", c = "ccc")
y <- list(d = 1, e = 2)
paste(x, y, sep = "-")
#[1] "aaa-1" "bbb-2" "ccc-1"

z <- list(x,y)
paste("T", z, sep = ":")

> as.character(x)
[1] "aaa" "bbb" "ccc"

> as.character(z)
[1] "list(a = \"aaa\", b = \"bbb\", c = \"ccc\")" "list(d = 1, e = 2)"

> paste(x,y, sep = "-", collapse = "; ")
[1] "aaa-1; bbb-2; ccc-1"

> paste(x, collapse = "_1_")
[1] "aaa_1_bbb_1_ccc"



text <- "Hello Adam!\nHello Ava!"
> strsplit(text, " ")
[[1]]
[1] "Hello"        "Adam!\nHello" "Ava!" 

> strsplit(text,"\n")
[[1]]
[1] "Hello Adam!" "Hello Ava!" 

> strsplit(text, "\\s")
[[1]]
[1] "Hello" "Adam!" "Hello" "Ava!" 

> strsplit(text, "")
[[1]]
 [1] "H"  "e"  "l"  "l"  "o"  " "  "A"  "d"  "a"  "m"  "!"  "\n" "H"  "e"  "l"  "l"  "o"  " "  "A"  "v"  "a"  "!" 



mychar <- c("ACTACCACTAACCACT","TCATCCATTCGTGGG","GTTGTTCCATAG")

strsplit(mychar, "G")
##[[1]]
##[1] "ACTACCACTAACCACT"
##
##[[2]]
##[1] "TCATCCATTC" "T"          ""           ""          
##
##[[3]]
##[1] ""        "TT"      "TTCCATA"

strsplit(mychar, "[CG]")
##[[1]]
##[1] "A"   "TA"  ""    "A"   "TAA" ""    "A"   "T"  
##
##[[2]]
##[1] "T"   "AT"  ""    "ATT" ""    "T"   ""    ""   
##
##[[3]]
##[1] ""    "TT"  "TT"  ""    "ATA"



files <- list.files("c:/windows")
> grep("\\.exe$", files)
 [1]  5 18 20 23 24 36 47 52 65 78 79 86 89

> grepl("\\.exe$",files)
 [1] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE
[27] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE
[53] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE
[79]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE

> files[grep("\\.exe$", files)]
 [1] "bfsvc.exe"     "explorer.exe"  "fveupdate.exe" "HelpPane.exe"  "hh.exe"        "notepad.exe"   "regedit.exe"   "RtCRU64.exe"   "splwow64.exe" 
[10] "twunk_16.exe"  "twunk_32.exe"  "winhlp32.exe"  "write.exe" 

> files[grepl("\\.exe$",files)]
 [1] "bfsvc.exe"     "explorer.exe"  "fveupdate.exe" "HelpPane.exe"  "hh.exe"        "notepad.exe"   "regedit.exe"   "RtCRU64.exe"   "splwow64.exe" 
[10] "twunk_16.exe"  "twunk_32.exe"  "winhlp32.exe"  "write.exe"



text <- c("Hellow, Adam!", "Hi, Adam!\nHI,Ava!", "How are you, Adam.")
> text
[1] "Hellow, Adam!"      "Hi, Adam!\nHI,Ava!" "How are you, Adam."

> sub(pattern = "Adam|Ava", replacement = "world", text)
[1] "Hellow, world!"      "Hi, world!\nHI,Ava!" "How are you, world."
> text
[1] "Hellow, Adam!"      "Hi, Adam!\nHI,Ava!" "How are you, Adam."

> gsub(pattern = "Adam|Ava", replacement = "world", text)
[1] "Hellow, world!"        "Hi, world!\nHI,world!" "How are you, world." 
> text
[1] "Hellow, Adam!"      "Hi, Adam!\nHI,Ava!" "How are you, Adam."



x <- "123456789"
> substr(x, c(2,4), c(4,5,8))
[1] "234"
> substring(x, c(2,4),c(4,5,8))
[1] "234"     "45"      "2345678"

> x <- c("123456789", "abcdefghijklmnopqrstuvwxyz")
> x
[1] "123456789"                  "abcdefghijklmnopqrstuvwxyz"
> substr(x, c(2,4), c(4,5,8))
[1] "234" "de"
> substring(x, c(2,4), c(4,5,8))
[1] "234"     "de"      "2345678"


bases <- c("A", "T", "G", "C")
DNA <- paste(sample(bases, 12, replace = T), collapse = "")
substring(DNA, seq(1,10, by = 3), seq(3,12, by = 3))
[1] "CCC" "GGG" "ATG" "TGT"



> strtrim(rep("abcdef", 3), c(1,3,5))
[1] "a"     "abc"   "abcde"
> strtrim(c("1","123", "12345"), 4)
[1] "1"    "123"  "1234"


str1 <- "Each character string in the input is first split into paragraphs\n(or lines containing whitespace only).  The paragraphs are then\nformatted by breaking lines at word boundaries.  The target\ncolumns for wrapping lines and the indentation of the first and\nall subsequent lines of a paragraph can be controlled\nindependently."
str2 <- rep(str1, 2)
strwrap(str2, width = 80, indent = 2)

> strwrap(str1, width = 80, indent = 2, exdent = 2)
[1] "  Each character string in the input is first split into paragraphs (or lines"
[2] "  containing whitespace only).  The paragraphs are then formatted by breaking"
[3] "  lines at word boundaries.  The target columns for wrapping lines and the"   
[4] "  indentation of the first and all subsequent lines of a paragraph can be"    
[5] "  controlled independently."


> match("xx", c("abc", "xx", "xxx", "xx"))
[1] 2
> match(2, c(3,1,2,4))
[1] 3
> charmatch("xx", "xx")
[1] 1
> charmatch("xx", "xxa")
[1] 1
> charmatch("xx", "axx")
[1] NA


exT<-c("Intron", "Exon", "promoter","enhancer")
> pmatch("x", exT)
[1] NA
> pmatch("E", exT)
[1] 2
> pmatch("e", exT)
[1] 4

> charmatch("E",exT)
[1] 2
> charmatch("e", exT)
[1] 4
> charmatch("x", exT)
[1] NA


> format(1:10)
## [1] " 1" " 2" " 3" " 4" " 5" " 6" " 7" " 8" " 9" "10"

> format(1:10, trim = T)
 [1] "1"  "2"  "3"  "4"  "5"  "6"  "7"  "8"  "9"  "10"


zz <- data.frame("(row.names)" = c("aaaaaa", "bb"), check.names = F)
 > data.frame("(row.names)" = c("aaaaaa", "b"), check.names = F)
  (row.names)
1      aaaaaa
2           b
> data.frame("(row.names)" = c("aaaaaa", "b"), check.names = T)
  X.row.names.
1       aaaaaa
2            b
 
> zz
  (row.names)
1      aaaaaa
2           b
> format(zz, justify = "left")
  (row.names)
1      aaaaaa
2      b 



> format(13.7)
[1] "13.7"
> format(13.7, nsmall = 3)
[1] "13.700"

> format(c(6.0, 13.1))
[1] " 6.0" "13.1"
> format(c(6.0, 13.1), digits = 2)
[1] " 6" "13"
> format(c(6.0, 13.1), digits = 2, nsmall = 1)
[1] " 6.0" "13.1"

> format(2^31 - 1)
[1] "2147483647"
> format(2^31 - 1, scientific = T)
[1] "2.147484e+09"



## regular expression














