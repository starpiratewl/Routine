##examples in R in Action


##array in R
dim1 <- c("A1","A2")
dim2 <- c("B1","B2", "B3")
dim3 <- c("c1", "c2", "c3", "c4")
lala <- array(1:24, c(2,3,4), dimnames = list(dim1, dim2, dim3))

##lala[1,2,3]
##[1] 15




## factor values in R
patientID <- c(1, 2, 3, 4)
age <- c(25, 34, 28, 52)
diabetes <- c("Type1", "Type2", "Type1", "Type1")
status <- c("Poor", "Improved", "Excellent", "Poor")
diabetes <- factor(diabetes)
status <- factor(status, order = T, levels = c("Poor", "Improved", "Excellent"))
## if factor values are numbers
## patientdata$gender <- factor(patientdata$gender, levels = c(1,2), labels = c("male", "female"))

patientdata <- data.frame(patientID, age, diabetes, status)
##str(patientdata)
##'data.frame':   4 obs. of  4 variables:
## $ patientID: num  1 2 3 4
## $ age      : num  25 34 28 52
## $ diabetes : Factor w/ 2 levels "Type1","Type2": 1 2 1 1
## $ status   : Ord.factor w/ 3 levels "Excellent"<"Improved"<..: 3 2 1 3
##summary(patientdata)
##   patientID         age         diabetes       status 
## Min.   :1.00   Min.   :25.00   Type1:3   Excellent:1  
## 1st Qu.:1.75   1st Qu.:27.25   Type2:1   Improved :1  
## Median :2.50   Median :31.00             Poor     :2  
## Mean   :2.50   Mean   :34.75                          
## 3rd Qu.:3.25   3rd Qu.:38.50                          
## Max.   :4.00   Max.   :52.00 




## list values in R
g <- "My list first"
h <- c(25, 26, 18, 39)
j <- matrix(1:10, nrow = 5)
k <- c("one", "tow", "three")
mylist <- list(title = g, ages = h, j, k)

##mylist[2]
##$ages
##[1] 25 26 18 39

##mylist[[2]]
##[1] 25 26 18 39

##mylist[["ages"]]
[1] 25 26 18 39

##mylist["ages"]
$ages
[1] 25 26 18 39


## import data from EXCEL

libary(RODBC)
channel <- odbcConnectExcel("myfile.xls")
mydataframe <- sqlFetch(channel, "mysheet")
odbcClose(channel)

## deal with office2007 xlsx files

library(xlsx)
workbook <- "c:/myworkbook.xlsx"
mydataframe <- read.xlsx(workbook, 1)



## import data from databases

library(RODBC)
myconn <- odbcConnect("mydsn", uid = "Rob", pwd = "aardvard")
crimedat <- sqlFetch(myconn, Crime)
pundat <- sqlQuery(myconn, "select * from Punishment")
close(myconn)














##计算给定正态分布95%面积下的z分数值
qnorm(0.95, mean = 0, sd = 1)   ##1.644


##计算z分数为0.95时候，正态分布下的面积
pnorm(0.95, mean = 0, sd = 1)   ##0.8289


##计算在给定的正态分布内，取到特定值的概率
dnorm(0.95, mean = 0,sd = 1)    ##0.254


##给出一个既定范围，既定数量的正态分布
rnorm(100, mean = 0, sd = 1)  ##一个数量为100，均值为0，sd为1的分布


pnorm(9.75,mean = 10, sd = 0.125) 
pnorm(10.25, mean = 10, sd = 0.125)

pnorm(9.75,mean = 10, sd = 0.125) + (1 - pnorm(10.25, mean = 10, sd = 0.125))

pnorm(10.25, mean = 9.7, sd = 0.0875) - pnorm(9.75,mean = 9.7, sd = 0.0875)


##从9.9到9.1，随着离原始均值10偏差越来越大，检验功效越来越高，说明检测出有问题的概率越来越高，9.5之后，就基本是100%了
pnorm(9.75,mean = 9.1, sd = 0.0875) + (1 - pnorm(10.25, mean = 9.1, sd = 0.0875))
pnorm(9.75,mean = 9.2, sd = 0.0875) + (1 - pnorm(10.25, mean = 9.2, sd = 0.0875))
pnorm(9.75,mean = 9.3, sd = 0.0875) + (1 - pnorm(10.25, mean = 9.3, sd = 0.0875))
pnorm(9.75,mean = 9.4, sd = 0.0875) + (1 - pnorm(10.25, mean = 9.4, sd = 0.0875))
pnorm(9.75,mean = 9.5, sd = 0.0875) + (1 - pnorm(10.25, mean = 9.5, sd = 0.0875))
pnorm(9.75,mean = 9.6, sd = 0.0875) + (1 - pnorm(10.25, mean = 9.6, sd = 0.0875))
pnorm(9.75,mean = 9.7, sd = 0.0875) + (1 - pnorm(10.25, mean = 9.7, sd = 0.0875))
pnorm(9.75,mean = 9.8, sd = 0.0875) + (1 - pnorm(10.25, mean = 9.8, sd = 0.0875))
pnorm(9.75,mean = 9.9, sd = 0.0875) + (1 - pnorm(10.25, mean = 9.9, sd = 0.0875))


##随着sd越来越大，检验功效越来越高，说明检测出有问题的概率越来越高，但是功效增长幅度没有均值变化来的显著
1- pnorm(10.25, mean = 10, sd = 0.0875) + pnorm(9.75,mean = 10, sd = 0.0875)
1-pnorm(10.25, mean = 10, sd = 0.0975) + pnorm(9.75,mean = 10, sd = 0.0975)
1-pnorm(10.25, mean = 10, sd = 0.1075) + pnorm(9.75,mean = 10, sd = 0.1075)
1-pnorm(10.25, mean = 10, sd = 0.1175) + pnorm(9.75,mean = 10, sd = 0.1175)
1-pnorm(10.25, mean = 10, sd = 0.1275) + pnorm(9.75,mean = 10, sd = 0.1275)
1-pnorm(10.25, mean = 10, sd = 0.1375) + pnorm(9.75,mean = 10, sd = 0.1375)
1-pnorm(10.25, mean = 10, sd = 0.1475) + pnorm(9.75,mean = 10, sd = 0.1475)
1-pnorm(10.25, mean = 10, sd = 0.1575) + pnorm(9.75,mean = 10, sd = 0.1575)
1-pnorm(10.25, mean = 10, sd = 0.1675) + pnorm(9.75,mean = 10, sd = 0.1675)
1-pnorm(10.25, mean = 10, sd = 0.1775) + pnorm(9.75,mean = 10, sd = 0.1775)
1-pnorm(10.25, mean = 10, sd = 0.1875) + pnorm(9.75,mean = 10, sd = 0.1875)
1-pnorm(10.25, mean = 10, sd = 0.1975) + pnorm(9.75,mean = 10, sd = 0.1975)







library(MASS)
options(digits=3)
set.seed(1234)
mean <- c(230.7, 146.7, 3.6)
sigma <- matrix(c(15360.8, 6721.2, -47.1,6721.2, 4700.9, -16.5,-47.1, -16.5, 0.3), nrow=3, ncol=3)
mydata <- mvrnorm(500, mean, sigma)
mydata <- as.data.frame(mydata)
names(mydata) <- c("y","x1","x2")
dim(mydata)
##[1] 500 3
head(mydata, n=10)
##       y    x1   x2
##1   98.8  41.3 3.43
##2  244.5 205.2 3.80
##3  375.7 186.7 2.51
##4  -59.2  11.2 4.71
##5  313.0 111.0 3.45
##6  288.8 185.1 2.72
##7  134.8 165.0 4.39
##8  171.7  97.4 3.64
##9  167.2 101.0 3.50
##10 121.1  94.5 4.10









options(digits=2)

Student <- c("John Davis", "Angela Williams", "Bullwinkle Moose","David Jones", "Janice Markhammer", "Cheryl Cushing","Reuven Ytzrhak", "Greg Knox", "Joel England","Mary Rayburn")

Math <- c(502, 600, 412, 358, 495, 512, 410, 625, 573, 522)

Science <- c(95, 99, 80, 82, 75, 85, 80, 95, 89, 86)

English <- c(25, 22, 18, 15, 20, 28, 15, 30, 27, 18)

roster <- data.frame(Student, Math, Science, English,stringsAsFactors=FALSE)

z <- scale(roster[,2:4])

score <- apply(z, 1, mean)

roster <- cbind(roster, score)

y <- quantile(score, c(.8,.6,.4,.2))

roster$grade[score >= y[1]] <- "A"
roster$grade[score < y[1] & score >= y[2]] <- "B"
roster$grade[score < y[2] & score >= y[3]] <- "C"
roster$grade[score < y[3] & score >= y[4]] <- "D"
roster$grade[score < y[4]] <- "F"


name <- strsplit((roster$Student), " ")
lastname <- sapply(name, "[", 2)
firstname <- sapply(name, "[", 1)
roster <- cbind(firstname,lastname, roster[,-1])

roster <- roster[order(lastname,firstname),]

roster
##    firstname  lastname  Math Science English score grade
##6      Cheryl    Cushing  512      85      28  0.35     C
##1        John      Davis  502      95      25  0.56     B
##9        Joel    England  573      89      27  0.70     B
##4       David      Jones  358      82      15 -1.16     F
##8        Greg       Knox  625      95      30  1.34     A
##5      Janice Markhammer  495      75      20 -0.63     D
##3  Bullwinkle      Moose  412      80      18 -0.86     D
##10       Mary    Rayburn  522      86      18 -0.18     C
##2      Angela   Williams  600      99      22  0.92     A
##7      Reuven    Ytzrhak  410      80      15 -1.05     F




##########################
## aggregate
##########################
options(digits=3)
attach(mtcars)
aggdata <-aggregate(mtcars, by=list(cyl,gear), FUN=mean, na.rm=TRUE)
aggdata
##  Group.1 Group.2  mpg cyl disp  hp drat   wt qsec  vs   am gear carb
##1       4       3 21.5   4  120  97 3.70 2.46 20.0 1.0 0.00    3 1.00
##2       6       3 19.8   6  242 108 2.92 3.34 19.8 1.0 0.00    3 1.00
##3       8       3 15.1   8  358 194 3.12 4.10 17.1 0.0 0.00    3 3.08
##4       4       4 26.9   4  103  76 4.11 2.38 19.6 1.0 0.75    4 1.50
##5       6       4 19.8   6  164 116 3.91 3.09 17.7 0.5 0.50    4 4.00
##6       4       5 28.2   4  108 102 4.10 1.83 16.8 0.5 1.00    5 2.00
##7       6       5 19.7   6  145 175 3.62 2.77 15.5 0.0 1.00    5 6.00
##8       8       5 15.4   8  326 300 3.88 3.37 14.6 0.0 1.00    5 6.00



##########################
## reshape
##########################

library(reshape)

md <- melt(mtcars, id=(c("cyl", "gear")))

head(md)
##  cyl gear variable value
##1   6    4      mpg  21.0
##2   6    4      mpg  21.0
##3   4    4      mpg  22.8
##4   6    3      mpg  21.4
##5   8    3      mpg  18.7
##6   6    3      mpg  18.1

## notice that here the result is the same as the aggregate function
cast(md, cyl+gear ~ variable, fun.aggregate = mean)
##  cyl gear  mpg disp  hp drat   wt qsec  vs   am carb
##1   4    3 21.5  120  97 3.70 2.46 20.0 1.0 0.00 1.00
##2   4    4 26.9  103  76 4.11 2.38 19.6 1.0 0.75 1.50
##3   4    5 28.2  108 102 4.10 1.83 16.8 0.5 1.00 2.00
##4   6    3 19.8  242 108 2.92 3.34 19.8 1.0 0.00 1.00
##5   6    4 19.8  164 116 3.91 3.09 17.7 0.5 0.50 4.00
##6   6    5 19.7  145 175 3.62 2.77 15.5 0.0 1.00 6.00
##7   8    3 15.1  358 194 3.12 4.10 17.1 0.0 0.00 3.08
##8   8    5 15.4  326 300 3.88 3.37 14.6 0.0 1.00 6.00




##########################
## basic plots
##########################

dose <- c(20,30,40,45,60)
drugA <- c(16,20,27,40,60)
drugB <- c(15,18,25,31,40)



plot(dose, drugA, type = "b", col = "red", lty = 2, lwd = 2, pch = 2, cex = 2, main = "Clinical trial for DrugA", xlab = "Dosage", ylab = "Drug Response", sub = "This is hypothetical data", xlim = c(0,60), ylim = c(0,70))

## about "type" parameter
##"p" for points,
##"l" for lines,
##"b" for both,
##"c" for the lines part alone of "b",
##"o" for both ‘overplotted’,
##"h" for ‘histogram’ like (or ‘high-density’) vertical lines,
##"s" for stair steps,
##"S" for other steps, The two step types differ in their x-y preference: Going from (x1,y1) to (x2,y2) with x1 < x2, type = "s" moves first horizontal, then vertical, whereas type = "S" moves the other way around.
##"n" for no plotting.

plot(dose, drugA, type = "b", col = "red", lty = 2, lwd = 2, pch = 2, cex = 2, main = "Clinical trial for DrugA", xlab = "Dosage", ylab = "Drug Response", sub = "This is hypothetic data", xlim = c(0,60), ylim = c(0,70), bg = "blue")

## triangles with blue color and green background
plot(dose, drugB, type = "b", col = "blue", bg = "green", pch = 24, lty = 6)

## triangles with blue color but no background color
plot(dose, drugB, type = "b", col = "blue", bg = "green", pch = 2, lty = 6)

## That is why the pch have some the same shape but they are asigned different serial numbers




















##########################
## barplot
##########################
library(vcd)
ounts <- table(Arthritis$Improved)
counts
##  None   Some Marked 
##    42     14     28 

## simple bar plot
barplot(counts,main="Simple Bar Plot",xlab="Improvement", ylab="Frequency")

## horizontal bar plot
barplot(counts,main="Horizontal Bar Plot",xlab="Frequency", ylab="Improvement",horiz=TRUE)


## the same plot as mentioned above. but here we use Arthritis$Improved straightly without table() functionm because
## Arthritis$Improved is a factor variable
plot(Arthritis$Improved, main="Simple Bar Plot",xlab="Improved", ylab="Frequency")
plot(Arthritis$Improved, horiz=TRUE, main="Horizontal Bar Plot",xlab="Frequency", ylab="Improved")


#####################################
## Stacked and grouped bar plots
#####################################

library(vcd)
counts <- table(Arthritis$Improved, Arthritis$Treatment)
counts
        
##         Placebo Treated
##  None        29      13
##  Some         7       7
##  Marked       7      21

## stacked
barplot(counts,main="Stacked Bar Plot",xlab="Treatment", ylab="Frequency",col=c("red", "yellow","green"),legend=rownames(counts))

## grouped
barplot(counts,main="Grouped Bar Plot",xlab="Treatment", ylab="Frequency",col=c("red", "yellow", "green"),legend=rownames(counts), beside=TRUE)



#####################################
## Mean bar plots
#####################################

states <- data.frame(state.region, state.x77)

means <- aggregate(states$Illiteracy, by=list(state.region), FUN=mean)

means
##        Group.1    x
##1     Northeast 1.00
##2         South 1.74
##3 North Central 0.70
##4          West 1.02

means <- means[order(means$x),]

means
##        Group.1    x
##3 North Central 0.70
##1     Northeast 1.00
##4          West 1.02
##2         South 1.74

barplot(means$x, names.arg=means$Group.1)
title("Mean Illiteracy Rate") 




#####################################
## Tweaking bar plots
#####################################

par(mar=c(5,8,4,2))
par(las=2)
counts <- table(Arthritis$Improved)

barplot(counts,main="Treatment Outcome",horiz=TRUE, cex.names=0.8,names.arg=c("No Improvement", "Some Improvement","Marked Improvement"))




#####################################
## Spinograms
#####################################
library(vcd)
attach(Arthritis)
counts <- table(Treatment, Improved)
spine(counts, main="Spinogram Example")
detach(Arthritis)







#####################################
##  pie chart
#####################################
par(mfrow=c(2, 2))
slices <- c(10, 12,4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pie(slices, labels = lbls,main="Simple Pie Chart")

pct <- round(slices/sum(slices)*100)
lbls2 <- paste(lbls, " ", pct, "%", sep="")
pie(slices, labels=lbls2, col=rainbow(length(lbls2)),main="Pie Chart with Percentages")

library(plotrix)
pie3D(slices, labels=lbls,explode=0.1,main="3D Pie Chart ")

mytable <- table(state.region)
lbls3 <- paste(names(mytable), "\n", mytable, sep="")
pie(mytable, labels = lbls3,main="Pie Chart from a Table\n (with sample sizes)")


#####################################
##  fan plot(improved pie chart)
#####################################
library(plotrix)
slices <- c(10, 12,4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
fan.plot(slices, labels = lbls, main="Fan Plot")





#####################################
##  Histograms
#####################################
par(mfrow=c(2,2))

hist(mtcars$mpg)

hist(mtcars$mpg,breaks=12, col="red",xlab="Miles Per Gallon",main="Colored histogram with 12 bins")

hist(mtcars$mpg,freq=FALSE, breaks=12,col="red",xlab="Miles Per Gallon",main="Histogram, rug plot, density curve")
rug(jitter(mtcars$mpg))
lines(density(mtcars$mpg), col="blue", lwd=2)

x <- mtcars$mpg
h<-hist(x,breaks=12,col="red",xlab="Miles Per Gallon",main="Histogram with normal curve and box")

xfit<-seq(min(x), max(x), length=40)
yfit<-dnorm(xfit, mean=mean(x), sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)

box()





#####################################
##  Kernel density plots
#####################################

par(mfrow=c(2,1))
d <- density(mtcars$mpg)
plot(d)

d <- density(mtcars$mpg)
plot(d, main="Kernel Density of Miles Per Gallon")
polygon(d, col="red", border="blue")
rug(mtcars$mpg, col="brown")



## compare the groups and set the legend
par(lwd=2)
library(sm) 
attach(mtcars)
cyl.f <- factor(cyl, levels= c(4,6,8),labels = c("4 cylinder", "6 cylinder", "8 cylinder"))
sm.density.compare(mpg, cyl, xlab="Miles Per Gallon")
title(main="MPG Distribution by Car Cylinders")
colfill<-c(2:(1+length(levels(cyl.f))))
legend(locator(1), levels(cyl.f), fill=colfill)
detach(mtcars)





#####################################
##  box plot
#####################################

boxplot(mtcars$mpg, main="Box plot", ylab="Miles per Gallon")
boxplot.stats(mtcars$mpg)


boxplot(mpg ~ cyl, data=mtcars,main="Car Mileage Data",xlab="Number of Cylinders",ylab="Miles Per Gallon")

boxplot(mpg ~ cyl, data=mtcars,notch=TRUE,varwidth=TRUE,col="red",main="Car Mileage Data",xlab="Number of Cylinders",ylab="Miles Per Gallon")

mtcars$cyl.f <- factor(mtcars$cyl,levels=c(4,6,8),labels=c("4","6","8"))
mtcars$am.f <- factor(mtcars$am,levels=c(0,1),labels=c("auto", "standard"))
boxplot(mpg ~ am.f *cyl.f,data=mtcars,varwidth=TRUE,col=c("gold","darkgreen"),main="MPG Distribution by Auto Type",xlab="Auto Type")



#####################################
##  Violin plots
#####################################

library(vioplot)
x1 <- mtcars$mpg[mtcars$cyl==4]
## notice "mtcars[mtcars$cyl==4,]$mpg"  is equal to "mtcars$mpg[mtcars$cyl==4]"
x2 <- mtcars$mpg[mtcars$cyl==6]
x3 <- mtcars$mpg[mtcars$cyl==8]
vioplot(x1, x2, x3,names=c("4 cyl", "6 cyl", "8 cyl"),col="gold")
title("Violin Plots of Miles Per Gallon")

cyl4 <- density(mtcars$mpg[mtcars$cyl==4])
cyl6 <- density(mtcars$mpg[mtcars$cyl==6])
cyl8 <- density(mtcars$mpg[mtcars$cyl==8])
plot(cyl4)
plot(cyl6)
plot(cyl8)





#####################################
##  Dot plots
#####################################

dotchart(mtcars$mpg, labels=row.names(mtcars), cex=.7,main="Gas Mileage for Car Models",xlab="Miles Per Gallon")


x <- mtcars[order(mtcars$mpg),]
x$cyl <- factor(x$cyl)
x$color[x$cyl==4] <- "red"
x$color[x$cyl==6] <- "blue"
x$color[x$cyl==8] <- "darkgreen"

dotchart(x$mpg, labels = row.names(x), cex=.7, groups = x$cyl, gcolor = "black", color = x$color, pch=19, main = "Gas Mileage for Car Models\ngrouped by cylinder", xlab = "Miles Per Gallon")

x$pch <- as.numeric(x$cyl)
dotchart(x$mpg, labels = row.names(x), cex=.7, groups = x$cyl, gcolor = "black", color = x$color, pch=as.numeric(x$cyl), main = "Gas Mileage for Car Models\ngrouped by cylinder", xlab = "Miles Per Gallon")

dotchart(x$mpg, labels = row.names(x), cex=.7, gcolor = "black", pch=x$pch, main = "Gas Mileage for Car Models\ngrouped by cylinder", xlab = "Miles Per Gallon")

dotchart(x$mpg, labels = row.names(x), cex=.7, groups = x$cyl, gcolor = "black", color = x$color, gpch=x$cyl, main = "Gas Mileage for Car Models\ngrouped by cylinder", xlab = "Miles Per Gallon")






























